name: Date-based Release with Nix

on:
  workflow_dispatch:
    inputs:
      force_release:
        description: "Force release even if no changes"
        required: false
        default: false
        type: boolean
  schedule:
    - cron: "0 9 * * 1"

jobs:
  preview:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix Cache
        uses: cachix/cachix-action@v12
        with:
          name: playground-docs
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          skipPush: true

      - name: Check for changes
        id: check
        run: |
          # Nix로 체인지로그 미리보기 실행
          nix run .#preview || PREVIEW_EXIT_CODE=$?

          # 변경사항 확인
          if nix run .#preview 2>/dev/null | grep -q "❌ No unreleased changes found"; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Show changelog preview
        if: steps.check.outputs.has_changes == 'true'
        run: nix run .#preview

  release:
    runs-on: ubuntu-latest
    needs: preview
    if: needs.preview.outputs.has_changes == 'true' || github.event.inputs.force_release == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix Cache
        uses: cachix/cachix-action@v12
        with:
          name: playground-docs
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release
        run: |
          # release
          nix run .#release

          # push release
          git push origin main
          git push origin $RELEASE_TAG

      - name: Extract changelog for GitHub release
        run: |
          # extract changelog from latest release
          nix run nixpkgs#git-cliff -- --latest --strip header > RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Release ${{ env.RELEASE_TAG }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
